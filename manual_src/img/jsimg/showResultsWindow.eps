%!PS-Adobe-3.0 EPSF-3.0
%%Creator: (ImageMagick)
%%Title: (showResultsWindow.eps)
%%CreationDate: (Mon Sep 22 10:36:13 2008)
%%BoundingBox: 0 0 22 22
%%HiResBoundingBox: 0 0 22 22
%%DocumentData: Clean7Bit
%%LanguageLevel: 1
%%Pages: 1
%%EndComments

%%BeginDefaults
%%EndDefaults

%%BeginProlog
%
% Display a color image.  The image is displayed in color on
% Postscript viewers or printers that support color, otherwise
% it is displayed as grayscale.
%
/DirectClassPacket
{
  %
  % Get a DirectClass packet.
  %
  % Parameters:
  %   red.
  %   green.
  %   blue.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile color_packet readhexstring pop pop
  compression 0 eq
  {
    /number_pixels 3 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add 3 mul def
  } ifelse
  0 3 number_pixels 1 sub
  {
    pixels exch color_packet putinterval
  } for
  pixels 0 number_pixels getinterval
} bind def

/DirectClassImage
{
  %
  % Display a DirectClass image.
  %
  systemdict /colorimage known
  {
    columns rows 8
    [
      columns 0 0
      rows neg 0 rows
    ]
    { DirectClassPacket } false 3 colorimage
  }
  {
    %
    % No colorimage operator;  convert to grayscale.
    %
    columns rows 8
    [
      columns 0 0
      rows neg 0 rows
    ]
    { GrayDirectClassPacket } image
  } ifelse
} bind def

/GrayDirectClassPacket
{
  %
  % Get a DirectClass packet;  convert to grayscale.
  %
  % Parameters:
  %   red
  %   green
  %   blue
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile color_packet readhexstring pop pop
  color_packet 0 get 0.299 mul
  color_packet 1 get 0.587 mul add
  color_packet 2 get 0.114 mul add
  cvi
  /gray_packet exch def
  compression 0 eq
  {
    /number_pixels 1 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add def
  } ifelse
  0 1 number_pixels 1 sub
  {
    pixels exch gray_packet put
  } for
  pixels 0 number_pixels getinterval
} bind def

/GrayPseudoClassPacket
{
  %
  % Get a PseudoClass packet;  convert to grayscale.
  %
  % Parameters:
  %   index: index into the colormap.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile byte readhexstring pop 0 get
  /offset exch 3 mul def
  /color_packet colormap offset 3 getinterval def
  color_packet 0 get 0.299 mul
  color_packet 1 get 0.587 mul add
  color_packet 2 get 0.114 mul add
  cvi
  /gray_packet exch def
  compression 0 eq
  {
    /number_pixels 1 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add def
  } ifelse
  0 1 number_pixels 1 sub
  {
    pixels exch gray_packet put
  } for
  pixels 0 number_pixels getinterval
} bind def

/PseudoClassPacket
{
  %
  % Get a PseudoClass packet.
  %
  % Parameters:
  %   index: index into the colormap.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile byte readhexstring pop 0 get
  /offset exch 3 mul def
  /color_packet colormap offset 3 getinterval def
  compression 0 eq
  {
    /number_pixels 3 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add 3 mul def
  } ifelse
  0 3 number_pixels 1 sub
  {
    pixels exch color_packet putinterval
  } for
  pixels 0 number_pixels getinterval
} bind def

/PseudoClassImage
{
  %
  % Display a PseudoClass image.
  %
  % Parameters:
  %   class: 0-PseudoClass or 1-Grayscale.
  %
  currentfile buffer readline pop
  token pop /class exch def pop
  class 0 gt
  {
    currentfile buffer readline pop
    token pop /depth exch def pop
    /grays columns 8 add depth sub depth mul 8 idiv string def
    columns rows depth
    [
      columns 0 0
      rows neg 0 rows
    ]
    { currentfile grays readhexstring pop } image
  }
  {
    %
    % Parameters:
    %   colors: number of colors in the colormap.
    %   colormap: red, green, blue color packets.
    %
    currentfile buffer readline pop
    token pop /colors exch def pop
    /colors colors 3 mul def
    /colormap colors string def
    currentfile colormap readhexstring pop pop
    systemdict /colorimage known
    {
      columns rows 8
      [
        columns 0 0
        rows neg 0 rows
      ]
      { PseudoClassPacket } false 3 colorimage
    }
    {
      %
      % No colorimage operator;  convert to grayscale.
      %
      columns rows 8
      [
        columns 0 0
        rows neg 0 rows
      ]
      { GrayPseudoClassPacket } image
    } ifelse
  } ifelse
} bind def

/DisplayImage
{
  %
  % Display a DirectClass or PseudoClass image.
  %
  % Parameters:
  %   x & y translation.
  %   x & y scale.
  %   label pointsize.
  %   image label.
  %   image columns & rows.
  %   class: 0-DirectClass or 1-PseudoClass.
  %   compression: 0-none or 1-RunlengthEncoded.
  %   hex color packets.
  %
  gsave
  /buffer 512 string def
  /byte 1 string def
  /color_packet 3 string def
  /pixels 768 string def

  currentfile buffer readline pop
  token pop /x exch def
  token pop /y exch def pop
  x y translate
  currentfile buffer readline pop
  token pop /x exch def
  token pop /y exch def pop
  currentfile buffer readline pop
  token pop /pointsize exch def pop
  /Times-Roman findfont pointsize scalefont setfont
  x y scale
  currentfile buffer readline pop
  token pop /columns exch def
  token pop /rows exch def pop
  currentfile buffer readline pop
  token pop /class exch def pop
  currentfile buffer readline pop
  token pop /compression exch def pop
  class 0 gt { PseudoClassImage } { DirectClassImage } ifelse
  grestore
} bind def
%%EndProlog
%%Page:  1 1
%%PageBoundingBox: 0 0 22 22
userdict begin
DisplayImage
0 0
22 22
12.000000
22 22
0
0
C0FFC0C0FFC0C0FFC0C0FFC0C0FFC0C0FFC0C0FFC0C0FFC0C0FFC0C0FFC0C0FFC0C0FFC0C0FFC0
C0FFC0C0FFC0C0FFC0C0FFC0C0FFC0AEFBC2B0FCC2C0FFC0C0FFC0C0FFC0C0FFC0C0FFC0C0FFC0
C0FFC0C0FFC0C0F4B8C4D49EC6AF82AC894B717B178A93359AA957ACCC84BDF8B8C0FFC0BBFEC1
74F6C91BECD542F1D0BDFEC1C0FFC0C0FFC0C0FFC0C0FFC0C0FFC0C0FCBECCBB89DB5839E1331B
E02310685E02415F004778004978005079016A7C0EA0C68057FBCE1CF9E51AF9E953FBDBBBFEC1
C0FFC0C0FFC0C0FFC0C0FFC0C3EEB2D5966AE65334E7452BE63F28D43518455D01415F00477800
47780047780045891F3ED99C37FCE43BFFEA70FFD8B8FFC4C0FFC0C0FFC0C0FFC0C0FFC0C4E6AC
E0764EEB6442EC6A4BEC6349EA5C47BD5A29385701446101477800477800498C2450D79D53F2B6
53F1CB6BC892BBFEC1C0FFC0C0FFC0C0FFC0C0FFC0C0FCBED98D63ED704CEF7E60F0866EEF826E
EC7B6D9F7831315300485C0247760051953569DFB46FEFB36DEBB85EBD7B517D0B99AD60C0FFC0
C0FFC0C0FFC0C0FFC0CCBB89E96946EF8161F1937AF4A99AF4A69AF4A69A86812E3E4B009A1C01
8D533889D7C088EFBA86EEBB75CE994C7C0A4778005A7805ACD18EC0FFC0C0FFC0C1F4B7E06E4A
EC6A4BF0896DF4A99AF8C4BAF9D2CAF8C4BA6C7F235A3900B63B38ABD4CCA5E3BAA2E8BC93DDC3
5389214778004778004778006F7E1AC0FFC0C0FFC0C4D49EE65334EC6349EF826EF4A69AF9D2CA
FFFFFFF9D2CA6C7F23714C1EBECEC8BEEED3BDEDCDBCE4DE8059444A6E00477800477800477800
557703B7EAA9C0FFC0C8B181E7452BEA5C47EE8070F4A69AF8C4BAF9D2CAF8C4BA70842BB5C1AD
D6F5EAD4F3D3D4EBE5AB71706901015941004778004778004778004E7801ACD18EC0FFC0CA956A
E53322EC7B6DEED5D0EFD2CCF4A99AF4A69AF4A69AABBA89E9F6F1EEFAEDEBEDE7DAB5B48B0909
6901015C270047780047780047780049780093A65EC0FFC0CB7253E9A8A3F4F2F1F4FAF4F4FAF4
F2C8C0EE7E70F09B90EBF5EEF4FAF4F4FAF4EEE0DFAC2C2C7D00006901015B1D00477800477800
4778004778007C8A3DC0FFC0C39574C0FFC0D8F2EAD9F3D2D9F5D8D8F2EAE38C83DCD7D2D2F7E1
D4F3D3D4EBE5BB6867880000730000530100592D0047780047780047780049780090A362C0FFC0
BFB486BF3A38BECEC8BDEDCDBEE7AABEEED3BCE4DEBDEDDFB2EFAFB2EDCDB1B2AB8B09097D0000
5E00005301005446004778004778004778004C7906A9CD8FC0FFC0BED7A2B51611B54E4CA1E5D8
A4DC9DA6D994A5E3BAA4DC9D95E89B93DDC38331307300005E0000530100562200477600477800
477800477800567911B8ECAFC0FFC0C0FABCB14B38B10A0A93A89989DAA892BF6092BF5F92C062
7BE3AA6499746901015301005301005622004A6E00477800477800477800477800728133C0FFC0
C0FFC0C0FFC0B8B78AA5120E95504B6AE1C570D26472CB4C6ED87B64DEBB3B66225633005A3900
544600497400477800477800477800477800587A14AED99FC0FFC0C0FFC0C0FFC0C0FFC0AE7256
93181855C9B84AE68F4DDE654BE3BC5FA076325501415F00477800477800477800477800477800
4778004C7C0A94AA75C0FFC0C0FFC0C0FFC0C0FFC0C0FFC0BBDEA79B372957857E28EED131D9BC
626F657F2E0C3657003E5F004778004778004778004778004778004C7906748444BDFEC1C0FFC0
C0FFC0C0FFC0C0FFC0C0FFC0C0FFC0BCEAB08B957B38A295623E3C8200007D11003E5B003E5F00
477800477800477800477800587A148C9E67BEFABEC0FFC0C0FFC0C0FFC0C0FFC0C0FFC0C0FFC0
C0FFC0C0FFC0C0FFC0B5C39399584284221A790F0B545A084161024978004C7906567911708137
ADD7A1C0FFC0C0FFC0C0FFC0C0FFC0C0FFC0C0FFC0C0FFC0C0FFC0C0FFC0C0FFC0C0FFC0C0FFC0
C0FFC0BDEEB3B5CC9CA9B68795AD6998AF6EA8CB90B7ECAFC0FFC0C0FFC0C0FFC0C0FFC0C0FFC0
C0FFC0C0FFC0C0FFC0

end
%%PageTrailer
%%Trailer
%%EOF
